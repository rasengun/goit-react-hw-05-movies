{"version":3,"file":"static/js/348.95cb39cd.chunk.js","mappings":"yNAiDA,UA5Ca,WACX,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAAkCE,EAAAA,EAAAA,UAAS,IAA3C,eAAOC,EAAP,KAAkBC,EAAlB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,kHAESC,EAAAA,EAAAA,IAAgBP,GAFzB,gBAENQ,EAFM,EAENA,KACRJ,EAAaI,GAHC,gDAILC,EAJK,KAILA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SALZ,yDAAH,qDASfP,GACD,GAAE,CAACN,IAEJ,IAAMc,EAAWX,EAAUY,KAAI,gBAAGf,EAAH,EAAGA,GAAIgB,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OAC7B,0BACoB,OAAjBD,GACC,gBACEE,IAAG,yCAAoCF,GACvCG,IAAI,SACJC,MAAM,QAJT,YASD,uBAAIL,KACJ,uBAAIE,MAXGlB,EADoB,IAgB/B,OACE,8BACGc,EAASQ,OAAS,GACjB,wBAAKR,KAEL,mEAIP,C,sLC7CKS,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,2GAAOC,EAAP,+BAAe,GAAf,SACLN,EAASO,IAAT,gBAA8B,CACnDJ,OAAQ,CACNG,MAAAA,KAHwB,uBACpBjB,EADoB,EACpBA,KADoB,kBAOrBA,GAPqB,2CAAH,qDAUdmB,EAAiB,mCAAG,sGACRR,EAASO,IAAT,uBADQ,uBACvBlB,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBoB,EAAY,mCAAG,WAAMhC,GAAN,yFACHuB,EAASO,IAAT,iBAAuB9B,IADpB,uBAClBY,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZL,EAAe,mCAAG,WAAMP,GAAN,yFACNuB,EAASO,IAAT,iBAAuB9B,EAAvB,aADM,uBACrBY,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfqB,EAAe,mCAAG,WAAMjC,GAAN,yFACNuB,EAASO,IAAT,iBAAuB9B,EAAvB,aADM,uBACrBY,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qD","sources":["components/Pages/SingleMoviePage/Cast/Cast.jsx","components/shared/services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieCredits } from 'components/shared/services/api';\n\nconst Cast = () => {\n  const { id } = useParams();\n  const [castMovie, setCastMovie] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { cast } = await getMovieCredits(id);\n        setCastMovie(cast);\n      } catch ({ response }) {\n        console.log(response.data.message);\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n\n  const elements = castMovie.map(({ id, name, profile_path, character }) => (\n    <li key={id}>\n      {profile_path !== null ? (\n        <img\n          src={`https://image.tmdb.org/t/p/w200${profile_path}`}\n          alt=\"poster\"\n          width=\"200\"\n        />\n      ) : (\n        `No image`\n      )}\n      <p>{name}</p>\n      <p>{character}</p>\n    </li>\n  ));\n\n  return (\n    <>\n      {elements.length > 0 ? (\n        <ul>{elements}</ul>\n      ) : (\n        <p>We don't have any cast for this movie.</p>\n      )}\n    </>\n  );\n};\n\nexport default Cast;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '78817c69ceeb2b190f57a1a13eaf9936',\n  },\n});\n\nexport const getSearchMovie = async (query = '') => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return data;\n};\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get(`/trending/movie/day`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["id","useParams","useState","castMovie","setCastMovie","useEffect","fetchCast","getMovieCredits","cast","response","console","log","data","message","elements","map","name","profile_path","character","src","alt","width","length","instance","axios","baseURL","params","api_key","getSearchMovie","query","get","getTrendingMovies","getMovieById","getMovieReviews"],"sourceRoot":""}