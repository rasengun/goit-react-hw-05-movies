{"version":3,"file":"static/js/720.abe5cd41.chunk.js","mappings":"yNAwCA,UAnCgB,WACd,IAAQA,GAAOC,EAAAA,EAAAA,MAAPD,GACR,GAA8BE,EAAAA,EAAAA,UAAS,IAAvC,eAAOC,EAAP,KAAgBC,EAAhB,MAEAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAS,mCAAG,kHAEYC,EAAAA,EAAAA,IAAgBP,GAF5B,gBAENQ,EAFM,EAENA,QACRJ,EAAWI,GAHG,gDAILC,EAJK,KAILA,SACTC,QAAQC,IAAIF,EAASG,KAAKC,SALZ,yDAAH,qDASfP,GACD,GAAE,CAACN,IAEJ,IAAMc,EAAWX,EAAQY,KAAI,gBAAGf,EAAH,EAAGA,GAAIgB,EAAP,EAAOA,OAAQC,EAAf,EAAeA,QAAf,OAC3B,2BACE,qCAAaD,MACb,6BAAKC,EAAL,SAFOjB,EADkB,IAO7B,OACE,+BACE,wBACuB,IAApBc,EAASI,OACN,2CACAJ,KAIX,C,sLCpCKK,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,+BAETC,OAAQ,CACNC,QAAS,sCAIAC,EAAc,mCAAG,2GAAOC,EAAP,+BAAe,GAAf,SACLN,EAASO,IAAT,gBAA8B,CACnDJ,OAAQ,CACNG,MAAAA,KAHwB,uBACpBb,EADoB,EACpBA,KADoB,kBAOrBA,GAPqB,2CAAH,qDAUde,EAAiB,mCAAG,sGACRR,EAASO,IAAT,uBADQ,uBACvBd,EADuB,EACvBA,KADuB,kBAExBA,GAFwB,2CAAH,qDAKjBgB,EAAY,mCAAG,WAAM5B,GAAN,yFACHmB,EAASO,IAAT,iBAAuB1B,IADpB,uBAClBY,EADkB,EAClBA,KADkB,kBAEnBA,GAFmB,2CAAH,sDAKZiB,EAAe,mCAAG,WAAM7B,GAAN,yFACNmB,EAASO,IAAT,iBAAuB1B,EAAvB,aADM,uBACrBY,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,sDAKfL,EAAe,mCAAG,WAAMP,GAAN,yFACNmB,EAASO,IAAT,iBAAuB1B,EAAvB,aADM,uBACrBY,EADqB,EACrBA,KADqB,kBAEtBA,GAFsB,2CAAH,qD","sources":["components/Pages/SingleMoviePage/Reviews/Reviews.jsx","components/shared/services/api.js"],"sourcesContent":["import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\n\nimport { getMovieReviews } from 'components/shared/services/api';\n\nconst Reviews = () => {\n  const { id } = useParams();\n  const [reviews, setReviews] = useState([]);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const { results } = await getMovieReviews(id);\n        setReviews(results);\n      } catch ({ response }) {\n        console.log(response.data.message);\n      }\n    };\n\n    fetchCast();\n  }, [id]);\n\n  const elements = reviews.map(({ id, author, content }) => (\n    <li key={id}>\n      <h3>Author: {author}</h3>\n      <p>`{content}`</p>\n    </li>\n  ));\n\n  return (\n    <>\n      <ul>\n        {elements.length === 0\n          ? \"We don't have any reviews for this movie\"\n          : elements}\n      </ul>\n    </>\n  );\n};\n\nexport default Reviews;\n","import axios from 'axios';\n\nconst instance = axios.create({\n  baseURL: 'https://api.themoviedb.org/3',\n\n  params: {\n    api_key: '78817c69ceeb2b190f57a1a13eaf9936',\n  },\n});\n\nexport const getSearchMovie = async (query = '') => {\n  const { data } = await instance.get(`/search/movie`, {\n    params: {\n      query,\n    },\n  });\n\n  return data;\n};\n\nexport const getTrendingMovies = async () => {\n  const { data } = await instance.get(`/trending/movie/day`);\n  return data;\n};\n\nexport const getMovieById = async id => {\n  const { data } = await instance.get(`/movie/${id}`);\n  return data;\n};\n\nexport const getMovieCredits = async id => {\n  const { data } = await instance.get(`/movie/${id}/credits`);\n  return data;\n};\n\nexport const getMovieReviews = async id => {\n  const { data } = await instance.get(`/movie/${id}/reviews`);\n  return data;\n};\n"],"names":["id","useParams","useState","reviews","setReviews","useEffect","fetchCast","getMovieReviews","results","response","console","log","data","message","elements","map","author","content","length","instance","axios","baseURL","params","api_key","getSearchMovie","query","get","getTrendingMovies","getMovieById","getMovieCredits"],"sourceRoot":""}